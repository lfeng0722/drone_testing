#!/usr/bin/env python3
import rospy
import tf
from geometry_msgs.msg import PoseStamped


def main():
    rospy.init_node('camera_world_pose_publisher')

    camera_pose_topic = rospy.get_param('~camera_pose_topic', '/camera_world_pose')
    # Create a publisher
    pub = rospy.Publisher(camera_pose_topic, PoseStamped, queue_size=10)

    # Initialize tf listener
    listener = tf.TransformListener()

    rate = rospy.Rate(15)  # 10 Hz
    while not rospy.is_shutdown():
        try:
            # Look up the transformation
            # (trans, rot) = listener.lookupTransform('Copter/odom_local_ned', 'downward_custom_optical', rospy.Time(0))
            (trans, rot) = listener.lookupTransform('Copter', 'downward_custom_optical', rospy.Time(0))



            # Create and populate the PoseStamped message
            pose_msg = PoseStamped()
            pose_msg.header.stamp = rospy.Time.now()
            pose_msg.header.frame_id = "world"

            # publish NED pose
            pose_msg.pose.position.x = trans[0]
            pose_msg.pose.position.y = trans[1]
            pose_msg.pose.position.z = trans[2]
            pose_msg.pose.orientation.x = rot[0]
            pose_msg.pose.orientation.y = rot[1]
            pose_msg.pose.orientation.z = rot[2]
            pose_msg.pose.orientation.w = rot[3]

            # convert pose from NED to ENU
            # (x y z)→(y x -z) or (w x y z)→(y x -z w)
            # pose_msg.pose.position.x = trans[1]
            # pose_msg.pose.position.y = trans[0]
            # pose_msg.pose.position.z = -trans[2]
            # pose_msg.pose.orientation.x = rot[0]
            # pose_msg.pose.orientation.y = -rot[2]
            # pose_msg.pose.orientation.z = rot[3]
            # pose_msg.pose.orientation.w = rot[1]

            # Publish the message
            pub.publish(pose_msg)

        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            continue

        rate.sleep()


if __name__ == '__main__':
    main()

